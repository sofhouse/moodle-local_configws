{"version":3,"file":"autoconfig.min.js","sources":["../src/autoconfig.js"],"sourcesContent":["import ModalForm from 'core_form/modalform';\nimport Config from 'core/config';\nimport {get_string as getString} from 'core/str';\n\nexport const init = (formClass) => {\n    renderModal(formClass);\n};\n\n/**\n * Render the modal form.\n *\n * @param {string} formClass\n * @param {int} user\n * @param {int} webservice\n * @returns {void}\n*/\nasync function renderModal(formClass, user = false, webservice = false) {\n    const form = new ModalForm({\n        formClass,\n        args: {\n            user: user,\n            webservice: webservice,\n        },\n        modalConfig: {\n            title: getString('autoconfig', 'local_configws'),\n        },\n        saveButtonText: 'Save',\n    });\n    form.addEventListener(form.events.FORM_SUBMITTED, (e) => {\n        const response = e.detail;\n        let redirect = `${Config.wwwroot}/local/configws/autoconfig.php?`;\n        let first = false;\n        for (let key in response) {\n            if (first) {\n                first = false;\n            } else {\n                redirect = redirect + '&';\n            }\n            redirect = redirect + `${key}=${response[key]}`;\n        }\n\n        window.location.assign(redirect);\n    });\n    await form.show();\n\n    let bodymodal = form.modal.getRoot().find('.modal-body')[0];\n\n    // Create a new MutationObserver\n    const observer = new MutationObserver((mutationsList, observer) => {\n        // Check if a select element is added to the body\n        const selectAdded = mutationsList.some((mutation) => {\n            return mutation.addedNodes && Array.from(mutation.addedNodes).some(() => {\n                return document.querySelector('.modal-body select[name=\"user\"]');\n            });\n        });\n        if (selectAdded) {\n            observer.disconnect();\n            // Select the event\n            const select = document.querySelector('.modal-body select[name=\"user\"]');\n            const webservice = document.querySelector('.modal-body select[name=\"webservice\"]');\n            select.addEventListener('change', (e) => {\n                form.modal.destroy();\n                if (e.target.value === '') {\n                    return;\n                }\n                renderModal(formClass, e.target.value, webservice.value);\n            });\n        }\n    });\n\n            // Start observing the body for mutations\n    observer.observe(bodymodal, { childList: true, subtree: true });\n\n    const wsobserver = new MutationObserver((mutationsList, observer) => {\n        // Check if a select element is added to the body\n        const selectAdded = mutationsList.some((mutation) => {\n            return mutation.addedNodes && Array.from(mutation.addedNodes).some(() => {\n                return document.querySelector('.modal-body select[name=\"webservice\"]');\n            });\n        });\n        if (selectAdded) {\n            observer.disconnect();\n            // Select the event\n            const select = document.querySelector('.modal-body select[name=\"webservice\"]');\n            const userid = document.querySelector('.modal-body select[name=\"user\"]').value;\n            select.addEventListener('change', (e) => {\n                if (e.target.value === 'new' || e.target.value === '0') {\n                    return;\n                }\n                form.modal.destroy();\n                renderModal(formClass, userid, e.target.value);\n            });\n        }\n    }\n    );\n\n    // Start observing the body for mutations\n    wsobserver.observe(bodymodal, { childList: true, subtree: true });\n}"],"names":["renderModal","formClass","user","webservice","form","ModalForm","args","modalConfig","title","saveButtonText","addEventListener","events","FORM_SUBMITTED","e","response","detail","redirect","Config","wwwroot","first","key","window","location","assign","show","bodymodal","modal","getRoot","find","observer","MutationObserver","mutationsList","some","mutation","addedNodes","Array","from","document","querySelector","disconnect","select","destroy","target","value","observe","childList","subtree","wsobserver","userid"],"mappings":"8YAgBeA,YAAYC,eAAWC,6DAAcC,yEAC1CC,KAAO,IAAIC,mBAAU,CACvBJ,UAAAA,UACAK,KAAM,CACFJ,KAAMA,KACNC,WAAYA,YAEhBI,YAAa,CACTC,OAAO,mBAAU,aAAc,mBAEnCC,eAAgB,SAEpBL,KAAKM,iBAAiBN,KAAKO,OAAOC,gBAAiBC,UACzCC,SAAWD,EAAEE,WACfC,mBAAcC,gBAAOC,2CACrBC,OAAQ,MACP,IAAIC,OAAON,SACRK,MACAA,OAAQ,EAERH,UAAsB,IAE1BA,oBAAyBI,gBAAON,SAASM,MAG7CC,OAAOC,SAASC,OAAOP,mBAErBZ,KAAKoB,WAEPC,UAAYrB,KAAKsB,MAAMC,UAAUC,KAAK,eAAe,SAGnDC,SAAW,IAAIC,kBAAiB,CAACC,cAAeF,eAE9BE,cAAcC,MAAMC,UAC7BA,SAASC,YAAcC,MAAMC,KAAKH,SAASC,YAAYF,MAAK,IACxDK,SAASC,cAAc,uCAGrB,CACbT,SAASU,mBAEHC,OAASH,SAASC,cAAc,mCAChCnC,WAAakC,SAASC,cAAc,yCAC1CE,OAAO9B,iBAAiB,UAAWG,IAC/BT,KAAKsB,MAAMe,UACY,KAAnB5B,EAAE6B,OAAOC,OAGb3C,YAAYC,UAAWY,EAAE6B,OAAOC,MAAOxC,WAAWwC,cAM9Dd,SAASe,QAAQnB,UAAW,CAAEoB,WAAW,EAAMC,SAAS,UAElDC,WAAa,IAAIjB,kBAAiB,CAACC,cAAeF,eAEhCE,cAAcC,MAAMC,UAC7BA,SAASC,YAAcC,MAAMC,KAAKH,SAASC,YAAYF,MAAK,IACxDK,SAASC,cAAc,6CAGrB,CACbT,SAASU,mBAEHC,OAASH,SAASC,cAAc,yCAChCU,OAASX,SAASC,cAAc,mCAAmCK,MACzEH,OAAO9B,iBAAiB,UAAWG,IACR,QAAnBA,EAAE6B,OAAOC,OAAsC,MAAnB9B,EAAE6B,OAAOC,QAGzCvC,KAAKsB,MAAMe,UACXzC,YAAYC,UAAW+C,OAAQnC,EAAE6B,OAAOC,eAOpDI,WAAWH,QAAQnB,UAAW,CAAEoB,WAAW,EAAMC,SAAS,kBA7FzC7C,YACjBD,YAAYC"}